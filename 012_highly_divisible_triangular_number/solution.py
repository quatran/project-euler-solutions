if __name__ == "__main__":
    import doctest
    doctest.testmod()

def divisors (n):
    """
    return all divisors of a given number

    >>> divisors(1)
    [1, 1]

    >>> divisors(12)
    [1, 2, 3, 4, 6, 12]
    """
    result = []
    
    i = 1
    while(i *i< n+1):  
        if (n%i == 0):
            result.append(n/i)
            result.append(i)
        i = i + 1
    result = sorted(result)
    return result 


triangularmemory = [0,1,3,6]
def nthtriangular(n):
    """
    return the n-th triangular number.
    a triangular is generated by adding the natural numbers
    Sequence A000217 in OEIS
    
    >>> nthtriangular(1)
    1

    >>> nthtriangular(5)
    15

    >>> nthtriangular(7)
    28
    """
    
    
    if (n<len(triangularmemory)):
        return triangularmemory[n]
    else:
        a=n+triangularmemory[n-1]
        triangularmemory.append(a)
        return triangularmemory[n]

def main():
    #initialize start values
    i = 1
    triangular = 1

    # we are looking for the first triangular number
    # that has more than 500 divisors
    while(len(divisors(triangular))<=500):
       triangular = nthtriangular(i)
       i = i + 1
       
    #printing the result 
    print("The {}th triangular number is number {}.".format(i, triangular))
    print("It has {} divisors:".format(len(divisors(triangular))))
    print(divisors(triangular))  
                   
main()
